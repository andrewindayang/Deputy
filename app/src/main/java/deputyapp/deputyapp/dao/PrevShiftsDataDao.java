package deputyapp.deputyapp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import deputyapp.deputyapp.dao.PrevShiftsData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PREV_SHIFTS_DATA".
*/
public class PrevShiftsDataDao extends AbstractDao<PrevShiftsData, Void> {

    public static final String TABLENAME = "PREV_SHIFTS_DATA";

    /**
     * Properties of entity PrevShiftsData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "ID");
        public final static Property Start = new Property(1, String.class, "start", false, "START");
        public final static Property End = new Property(2, String.class, "end", false, "END");
        public final static Property StartLatitude = new Property(3, String.class, "startLatitude", false, "START_LATITUDE");
        public final static Property StartLongitude = new Property(4, String.class, "startLongitude", false, "START_LONGITUDE");
        public final static Property EndLatitude = new Property(5, String.class, "endLatitude", false, "END_LATITUDE");
        public final static Property EndLongitude = new Property(6, String.class, "endLongitude", false, "END_LONGITUDE");
        public final static Property Image = new Property(7, String.class, "image", false, "IMAGE");
    };


    public PrevShiftsDataDao(DaoConfig config) {
        super(config);
    }
    
    public PrevShiftsDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PREV_SHIFTS_DATA\" (" + //
                "\"ID\" TEXT," + // 0: id
                "\"START\" TEXT," + // 1: start
                "\"END\" TEXT," + // 2: end
                "\"START_LATITUDE\" TEXT," + // 3: startLatitude
                "\"START_LONGITUDE\" TEXT," + // 4: startLongitude
                "\"END_LATITUDE\" TEXT," + // 5: endLatitude
                "\"END_LONGITUDE\" TEXT," + // 6: endLongitude
                "\"IMAGE\" TEXT);"); // 7: image
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PREV_SHIFTS_DATA\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PrevShiftsData entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String start = entity.getStart();
        if (start != null) {
            stmt.bindString(2, start);
        }
 
        String end = entity.getEnd();
        if (end != null) {
            stmt.bindString(3, end);
        }
 
        String startLatitude = entity.getStartLatitude();
        if (startLatitude != null) {
            stmt.bindString(4, startLatitude);
        }
 
        String startLongitude = entity.getStartLongitude();
        if (startLongitude != null) {
            stmt.bindString(5, startLongitude);
        }
 
        String endLatitude = entity.getEndLatitude();
        if (endLatitude != null) {
            stmt.bindString(6, endLatitude);
        }
 
        String endLongitude = entity.getEndLongitude();
        if (endLongitude != null) {
            stmt.bindString(7, endLongitude);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(8, image);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public PrevShiftsData readEntity(Cursor cursor, int offset) {
        PrevShiftsData entity = new PrevShiftsData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // start
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // end
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // startLatitude
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // startLongitude
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // endLatitude
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // endLongitude
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // image
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PrevShiftsData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setStart(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEnd(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStartLatitude(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStartLongitude(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEndLatitude(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEndLongitude(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setImage(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(PrevShiftsData entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(PrevShiftsData entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
